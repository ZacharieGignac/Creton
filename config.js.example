module.exports.config = {
    debug: false,
    codec: {
        auth: {
            username: 'codecusername',   //username
            password: 'codecpassword'    //password
        },
        info: {
            ip: '1.1.1.1',
            serialNumber: 'SerialNumberHere',
            name: 'Creton'
        }
    },
    telemetry: {
        broker: 'mqtt broker host/ip',
	    cliendId: 'clientid',
        username: 'telemetryusername',
        password: 'telemetrypassword',
        basepath: 'systems/systemname'
    },
    serialPorts: [
        {
            name:'monitor',
            device:'/dev/serial/by-id/usb-Prolific_Technology_Inc._USB-Serial_Controller_D_00000EBA-if00-port0',
            baudRate:9600,
            delimiter:'\r',
            read:false
        },
        {
            name:'projector',
            device:'/dev/serial/by-id/usb-Texas_Instruments_TUSB3410_EECode_Ser_10002194-if00-port0',
            baudRate:9600,
            delimiter:'\r',
            read:true
        }
    ],
    triggers:[
        {
            id:'tv_power_on',           //id for this trigger
            text:'TV_POWER_ON',         //text to match from the codec (xapi.Command.Message)
            serialPort:'monitor', //Name of the serial port to use (see up there)
            raw:'ka 01 01\r',         //Raw command to send to the serial port
            repeat:5000,            //Repeat this commande every X ms
	    telemetrypath:'/dev/monitor/power',
            telemetryvalue:'1',
            cancel:'tv_power_off',       //Cancel another trigger repeat, match its id
        },
        {
            id:'tv_power_off',
            text:'TV_POWER_OFF',
            serialPort:'monitor',
            raw:'ka 01 00\r',
            repeat:5000,
            cancel:'tv_power_on',
            onStart:true,
            telemetrypath:'/dev/monitor/power',
            telemetryvalue:'0'
        },
        {
            id:'proj_power_on',
            text:'PROJ_POWER_ON',
            serialPort:'projector',
            raw:'PWR ON\r',
            repeat:5000,
            cancel:'proj_power_off',
            telemetrypath:'/dev/projector/power',
            telemetryvalue:'1'
        },
        {
            id:'proj_power_off',
            text:'PROJ_POWER_OFF',
            serialPort:'projector',
            raw:'PWR OFF\r',
            repeat:5000,
            cancel:'proj_power_on',
            onStart:true,
	    telemetrypath:'/dev/projector/power',
            telemetryvalue:'0'
        },
	{
	    id:'lampqquery',
	    text:'PROJ_LAMP_QUERY',
	    serialPort:'projector',
	    raw:'LAMP?\r',
	    repeat:'66000',
	    onStart:true
	}
/*,
	{
	    id:'query_lamp_hours',
            text:'QUERY_LAMP_HOURS',
            serialPort:'projector',
            raw:'LAMP?\r',
            repeat:300000,
            onStart:true
	}
*/
    ],
    serialParsing: [
        /*
        {
            id: 'fake-lamphour-data-to-test', //unique ID
            serialPort:'fake-lh',             //any serial port starting with with "fake-" will be faked
            fakeData:':LAMP=3000',            //fake data that will be emitted every 5s
            match:data => { if(data.substring(0,5) == ':LAMP') { return data.substring(6); } }, //data match. That data will be sent to telemetrypath. Return undefined to discard.
            telemetrypath:'/dev/projector/lamphours',   //telemetry path. Added to "basepath"
        }
	*/
        /*,
        {
            id: 'fake-ERR-data-to-test', //unique ID
            serialPort:'fake-err',             //any serial port starting with with "fake-" will be faked
            fakeData:':ERR',            //fake data that will be emitted every 5s
            match:data => { if(data == ':ERR') { return 'ERROR!!!!!' } }, 
            telemetrypath:'/projector/error',   //telemetry path. Added to "basepath"
        }*/
         /*
        {
            id:'lamphours',
            serialPort:'projector',
            match:data => { if(data.substring(0,5) == ':LAMP') { return data.substring(6); } },
            telemetrypath:'/projector/lamphours'
        }
*/
        {
            id:'real-lamphours',
            serialPort:'projector',
            match:data => { 
                var data = data.toString().replace(/:/g,'');
                if (data.substring(0,4) == 'LAMP') {
                    return data.substring(5);
                }
            },
            telemetrypath:'/dev/projector/lamphours'
        }

        

    ]
}
